if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# histogram
ggplot(data,aes(x=readm_ratio))+
geom_histogram()+facet_grid(~state)+theme_bw()
lattice::histogram(~ readm_ratio | state, data = data)
lattice::histogram(~ readm_ratio | hospital_ownership,
data = data)
lattice::histogram(~ readm_ratio | hospital_type,
data = data)
# for each readmission procedure
unique(data$measure_id)
proc <- "READM-30-AMI-HRRP"
# histogram
ggplot(excess[excess$measure_id %in% proc,],aes(x=readm_ratio))+
geom_histogram()+facet_grid(~state)+theme_bw()
lattice::histogram(~ readm_ratio | state,
data = excess[excess$measure_id %in% proc,])
lattice::histogram(~ readm_ratio | hospital_ownership,
data = excess[excess$measure_id %in% proc,])
lattice::histogram(~ readm_ratio | hospital_type,
data = excess[excess$measure_id %in% proc,])
ggplot(data=excess[excess$measure_id %in% proc,]) +
geom_density(aes(x=readm_ratio, group=hospital_type, fill=hospital_type),
alpha=0.5, adjust=2)
ggplot(data=excess[excess$measure_id %in% proc,]) +
geom_density(aes(x=readm_ratio, group=hospital_type, fill=hospital_type),
alpha=0.5, adjust=2) +
facet_grid(~hospital_type)
ggplot(data=excess[excess$measure_id %in% proc,]) +
geom_density(aes(x=readm_ratio, group=hospital_type, fill=hospital_ownership),
alpha=0.5, adjust=2) +
facet_grid(~hospital_type)
ggplot(data=excess[excess$measure_id %in% proc,]) +
geom_density(aes(x=readm_ratio, group=hospital_type, fill=hospital_ownership),
alpha=0.5, adjust=2) +
facet_grid(~hospital_ownership)
ggplot(excess[excess$measure_id %in% proc,],
aes(x=hospital_ownership, y=readm_ratio)) + geom_boxplot() +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
head(data)
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
stats <- as.data.frame()
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
stats <- as.data.frame(grouping = c("hospital_type","hospital_ownership",
"state"))
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
stats <- data.frame(grouping = as.character())
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
stats <- data.frame(grouping = as.character(),
group = as.character(),
tsig = as.numeric(),
ksig = as.numeric())
head(stats)
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
stats <- data.frame(rbind(unique(data$hospital_type),
unique(data$hospital_name)))
head(stats)
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
stats <- data.frame(rbind(unique(data$hospital_type),
unique(data$hospital_ownership)))
head(stats)
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
stats <- data.frame(rbind(unique(as.character(data$hospital_type)),
unique(as.character(data$hospital_ownership))))
head(stats)
unique(as.character(data$hospital_type))
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
data.frame(grouping = "hospital_type")
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
data.frame(grouping = "hospital_type",
group = unique(data$hospital_type))
group = unique(data$state))
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
rbind(data.frame(grouping = "hospital_type",
group = unique(data$hospital_type)),
data.frame(grouping = "hospital_ownership",
group = unique(data$hospital_ownership)),
data.frame(grouping = "state",
group = unique(data$state))
)
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
# dataframe to store statistical metrics in
stats <- rbind(data.frame(grouping = "hospital_type",
group = unique(data$hospital_type)),
data.frame(grouping = "hospital_ownership",
group = unique(data$hospital_ownership)),
data.frame(grouping = "state",
group = unique(data$state))
)
stats$tsig <- as.numeric()
stats$tsig <- as.numeric(NULL)
head(stats)
stats$tsig <- NA
stats$ksig <- NA
head(stats)
stats$mean <- NA
data[is.na(data$readm_ratio),]
use <- data %>%
filter(!is.na(readm_ratio))
## loop through combinations to get averages and significance of difference
for(i in c(1:nrow(stats))){
row <- stats[i,]
grouping <- row$grouping
group <- row$group
## manual testing
# yr <- 2017
# seg <- "X1.to.1.Sessions"
# g <- "Eligible Non-Citizen"
# var <- "Student.Residency.Status"
## keep only grouping variable and metric
use <- notna[,c(grouping, "readm_ratio")]
## population = everything except grouping variable
pop <- use[!((as.character(use[,grouping])) %in% group),]
## subset to look at
use_data <- use[as.character(use[,grouping]) %in% group,]
## mean of this sample
samp_avg <- mean(use_data$readm_ratio, na.rm = TRUE)
## two sided t test
t2 <- tryCatch(t.test(x = log(use_data$readm_ratio),
y = log(pop$readm_ratio),
var.equal = FALSE),
# warning = function(w) {"warning";},
error = function(e) {"error";})
p2 <- ifelse(unique(t2 %in% c("error")), t2, t2$p.value)
stats[i,"tsig"] <- p2
## to test the overall distribution:
## two-sample Kolmogorov-Smirnovtest
ks <- tryCatch(ks.test(use_data$readm_ratio,
pop$readm_ratio,
alternative = "two.sided"),
# warning = function(w) {"warning";},
error = function(e) {"error";})
k <- ifelse(unique(ks %in% c("error")), ks, ks$p.value)
stats[i,"ksig"] <- k
}
notna <- data %>%
filter(!is.na(readm_ratio))
## loop through combinations to get averages and significance of difference
for(i in c(1:nrow(stats))){
row <- stats[i,]
grouping <- row$grouping
group <- row$group
## manual testing
# yr <- 2017
# seg <- "X1.to.1.Sessions"
# g <- "Eligible Non-Citizen"
# var <- "Student.Residency.Status"
## keep only grouping variable and metric
use <- notna[,c(grouping, "readm_ratio")]
## population = everything except grouping variable
pop <- use[!((as.character(use[,grouping])) %in% group),]
## subset to look at
use_data <- use[as.character(use[,grouping]) %in% group,]
## mean of this sample
samp_avg <- mean(use_data$readm_ratio, na.rm = TRUE)
## two sided t test
t2 <- tryCatch(t.test(x = log(use_data$readm_ratio),
y = log(pop$readm_ratio),
var.equal = FALSE),
# warning = function(w) {"warning";},
error = function(e) {"error";})
p2 <- ifelse(unique(t2 %in% c("error")), t2, t2$p.value)
stats[i,"tsig"] <- p2
## to test the overall distribution:
## two-sample Kolmogorov-Smirnovtest
ks <- tryCatch(ks.test(use_data$readm_ratio,
pop$readm_ratio,
alternative = "two.sided"),
# warning = function(w) {"warning";},
error = function(e) {"error";})
k <- ifelse(unique(ks %in% c("error")), ks, ks$p.value)
stats[i,"ksig"] <- k
}
grouping
## loop through combinations to get averages and significance of difference
for(i in c(1:nrow(stats))){
row <- stats[i,]
grouping <- as.character(row$grouping)
group <- as.character(row$group)
## manual testing
# yr <- 2017
# seg <- "X1.to.1.Sessions"
# g <- "Eligible Non-Citizen"
# var <- "Student.Residency.Status"
## keep only grouping variable and metric
use <- notna[,c(grouping, "readm_ratio")]
## population = everything except grouping variable
pop <- use[!((as.character(use[,grouping])) %in% group),]
## subset to look at
use_data <- use[as.character(use[,grouping]) %in% group,]
## mean of this sample
samp_avg <- mean(use_data$readm_ratio, na.rm = TRUE)
## two sided t test
t2 <- tryCatch(t.test(x = log(use_data$readm_ratio),
y = log(pop$readm_ratio),
var.equal = FALSE),
# warning = function(w) {"warning";},
error = function(e) {"error";})
p2 <- ifelse(unique(t2 %in% c("error")), t2, t2$p.value)
stats[i,"tsig"] <- p2
## to test the overall distribution:
## two-sample Kolmogorov-Smirnovtest
ks <- tryCatch(ks.test(use_data$readm_ratio,
pop$readm_ratio,
alternative = "two.sided"),
# warning = function(w) {"warning";},
error = function(e) {"error";})
k <- ifelse(unique(ks %in% c("error")), ks, ks$p.value)
stats[i,"ksig"] <- k
}
warnings()
# statistical differences in readmission rates by hospital characteristics?
# type, ownership, state?
# dataframe to store statistical metrics in
stats <- rbind(data.frame(grouping = "hospital_type",
group = unique(data$hospital_type)),
data.frame(grouping = "hospital_ownership",
group = unique(data$hospital_ownership)),
data.frame(grouping = "state",
group = unique(data$state))
)
stats$tsig <- NA
stats$ksig <- NA
stats$n_obs <- NA
head(stats)
notna <- data %>%
filter(!is.na(readm_ratio))
## loop through combinations to get averages and significance of difference
for(i in c(1:nrow(stats))){
row <- stats[i,]
grouping <- as.character(row$grouping)
group <- as.character(row$group)
## keep only grouping variable and metric
use <- notna[,c(grouping, "readm_ratio")]
## population = everything except grouping variable
pop <- use[!((as.character(use[,grouping])) %in% group),]
## subset to look at
use_data <- use[as.character(use[,grouping]) %in% group,]
stats[i,"n_obs"] <- nrow(use_data)
## two sided t test
t2 <- tryCatch(t.test(x = log(use_data$readm_ratio),
y = log(pop$readm_ratio),
var.equal = FALSE),
# warning = function(w) {"warning";},
error = function(e) {"error";})
p2 <- ifelse(unique(t2 %in% c("error")), t2, t2$p.value)
stats[i,"tsig"] <- p2
## to test the overall distribution:
## two-sample Kolmogorov-Smirnovtest
ks <- tryCatch(ks.test(use_data$readm_ratio,
pop$readm_ratio,
alternative = "two.sided"),
# warning = function(w) {"warning";},
error = function(e) {"error";})
k <- ifelse(unique(ks %in% c("error")), ks, ks$p.value)
stats[i,"ksig"] <- k
}
head(stats)
summary(stats$tsig)
summary(stats$ksig)
stats[stats$tsig %in% "warning"]
stats[stats$tsig %in% "error"]
stats[stats$ksig %in% "warning"]
stats[stats$ksig %in% "error"]
head(stats)
stats[stats$tsig < 0.1 | stats$ksig < 0.1,]
nrow(stats)
sig <- stats[stats$tsig < 0.1 | stats$ksig < 0.1,]
nrow(sig)
sig
sig[,c("grouping","group","tsig","ksig")]
sig <- stats[stats$tsig < 0.05 | stats$ksig < 0.05,]
nrow(sig)
sig[,c("grouping","group","tsig","ksig")]
## loop through combinations to get averages and significance of difference
for(i in c(1:nrow(stats))){
row <- stats[i,]
grouping <- as.character(row$grouping)
group <- as.character(row$group)
## keep only grouping variable and metric
use <- notna[,c(grouping, "readm_ratio")]
## population = everything except grouping variable
pop <- use[!((as.character(use[,grouping])) %in% group),]
## subset to look at
use_data <- use[as.character(use[,grouping]) %in% group,]
stats[i,"n_obs"] <- nrow(use_data)
## two sided t test
t2 <- tryCatch(t.test(x = log(use_data$readm_ratio),
y = log(pop$readm_ratio),
var.equal = FALSE),
# warning = function(w) {"warning";},
error = function(e) {"error";})
p2 <- ifelse(unique(t2 %in% c("error")), t2, t2$p.value)
stats[i,"tsig"] <- round(p2,2)
## to test the overall distribution:
## two-sample Kolmogorov-Smirnovtest
ks <- tryCatch(ks.test(use_data$readm_ratio,
pop$readm_ratio,
alternative = "two.sided"),
# warning = function(w) {"warning";},
error = function(e) {"error";})
k <- ifelse(unique(ks %in% c("error")), ks, ks$p.value)
stats[i,"ksig"] <- round(k,2)
}
head(stats)
summary(stats$tsig)
summary(stats$ksig)
stats[stats$tsig %in% "warning"]
stats[stats$tsig %in% "error"]
stats[stats$ksig %in% "warning"]
stats[stats$ksig %in% "error"]
nrow(stats)
sig <- stats[stats$tsig < 0.05 | stats$ksig < 0.05,]
nrow(sig)
sig[,c("grouping","group","tsig","ksig")]
## loop through combinations to get averages and significance of difference
for(i in c(1:nrow(stats))){
row <- stats[i,]
grouping <- as.character(row$grouping)
group <- as.character(row$group)
## keep only grouping variable and metric
use <- notna[,c(grouping, "readm_ratio")]
## population = everything except grouping variable
pop <- use[!((as.character(use[,grouping])) %in% group),]
## subset to look at
use_data <- use[as.character(use[,grouping]) %in% group,]
stats[i,"n_obs"] <- nrow(use_data)
## two sided t test
t2 <- tryCatch(t.test(x = log(use_data$readm_ratio),
y = log(pop$readm_ratio),
var.equal = FALSE),
# warning = function(w) {"warning";},
error = function(e) {"error";})
p2 <- ifelse(unique(t2 %in% c("error")), t2, t2$p.value)
stats[i,"tsig"] <- round(p2,4)
## to test the overall distribution:
## two-sample Kolmogorov-Smirnovtest
ks <- tryCatch(ks.test(use_data$readm_ratio,
pop$readm_ratio,
alternative = "two.sided"),
# warning = function(w) {"warning";},
error = function(e) {"error";})
k <- ifelse(unique(ks %in% c("error")), ks, ks$p.value)
stats[i,"ksig"] <- round(k,4)
}
head(stats)
summary(stats$tsig)
summary(stats$ksig)
stats[stats$tsig %in% "warning"]
stats[stats$tsig %in% "error"]
stats[stats$ksig %in% "warning"]
stats[stats$ksig %in% "error"]
nrow(stats)
sig <- stats[stats$tsig < 0.05 | stats$ksig < 0.05,]
nrow(sig)
sig[,c("grouping","group","tsig","ksig")]
sig[,c("grouping","group","tsig","ksig")]
sig[,c("group","tsig","ksig")]
```
---
### Here are two Shiny widgets
```{r echo = FALSE}
test <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv')
head(test)
# install packages if not already installed
list.of.packages <- c("RSocrata","dplyr","tidyr","ggplot2","lattice","plotly")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# change default color scale title
m <- list(colorbar = list(title = "Total Inches"))
m
# change default color scale title
m <- list(colorbar = list(title = "Readmission Rate"))
m
# geo styling
g <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("grey83"),
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = toRGB("white"),
showsubunits = TRUE,
showcountries = TRUE,
resolution = 50,
projection = list(
type = 'conic conformal',
rotation = list(lon = -100)
),
lonaxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(-140, -55),
dtick = 5
),
lataxis = list(
showgrid = TRUE,
gridwidth = 0.5,
range = c(20, 60),
dtick = 5
)
)
p <- plot_geo(test, lat = ~Lat, lon = ~Lon, color = ~Globvalue) %>%
add_markers(
text = ~paste(df$Globvalue, "inches"), hoverinfo = "text"
) %>%
layout(title = 'US Precipitation 06-30-2015<br>Source: NOAA', geo = g)
p
head(data)
sapply(strsplit(data$location.char, ", "), "[", 1)
gsub("c(","",sapply(strsplit(data$location.char, ", "), "[", 1))
sapply(strsplit(data$location.char, ", "), "[", 1)
gsub("c(","",sapply(strsplit(data$location.char, ", "), "[", 1))
gsub("c\\(","",sapply(strsplit(data$location.char, ", "), "[", 1))
data$lat <- gsub("c\\(","",sapply(strsplit(data$location.char, ", "), "[", 1))
data$lat <- as.numeric(gsub("c\\(","",sapply(strsplit(data$location.char, ", "), "[", 1)))
sapply(strsplit(data$location.char, ", "), "[", 2)
data$long <- as.numeric(gsub("\\)","",sapply(strsplit(data$location.char, ", "), "[", 2)))
head(data$lat, data$long)
head(data[,c("lat","long")])
p <- plot_geo(data, lat = ~lat, lon = ~long, color = ~readm_ratio) %>%
add_markers(
text = df$readm_ratio, hoverinfo = "text"
) %>%
layout(title = 'Readmission Rates across US', geo = g)
p
head(data[,c("lat","long","state")])
data$long <- as.numeric(gsub("c\\(","",sapply(strsplit(data$location.char, ", "), "[", 1)))
data$lat <- as.numeric(gsub("\\)","",sapply(strsplit(data$location.char, ", "), "[", 2)))
head(data[,c("lat","long","state")])
p <- plot_geo(data, lat = ~lat, lon = ~long, color = ~readm_ratio) %>%
add_markers(
text = df$readm_ratio, hoverinfo = "text"
) %>%
layout(title = 'Readmission Rates across US', geo = g)
p
# what is the distribution of rate by key hospital characteristics?
# by: state, hospital_ownership, hospital_type
excess <- data[which(data$excessive_readm %in% 1),]
p <- plot_geo(excess, lat = ~lat, lon = ~long, color = ~readm_ratio) %>%
add_markers(
text = df$readm_ratio, hoverinfo = "text"
) %>%
layout(title = 'Excessive Readmission Rates across US', geo = g)
p
nrow(excess)
p <- plot_geo(excess, lat = ~lat, lon = ~long, color = ~readm_ratio) %>%
add_markers(
text = excess$readm_ratio, hoverinfo = "text"
) %>%
layout(title = 'Excessive Readmission Rates across US', geo = g)
p
# set working directory to directory of source file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# install packages if not already installed
list.of.packages <- c("RSocrata","dplyr","tidyr","ggplot2","lattice","plotly")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# later pull this data using API credentials
list.files('.')
readm <- read.csv('hosp_readm_reduction_prgm_data.csv')
hosp <- read.csv('hosp_general_info.csv')
head(readm)
head(hosp)
library(keras)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
clothing_reviews <- read_csv("Womens Clothing E-Commerce Reviews.csv") %>%
mutate(Liked = ifelse(Rating == 5, 1, 0),
text = paste(Title, `Review Text`),
text = gsub("NA", "", text))
head(clothing_reviews)
glimpse(clothing_reviews)
clothing_reviews %>%
ggplot(aes(x = factor(Liked), fill = Liked)) +
geom_bar(alpha = 0.8) +
guides(fill = FALSE)
text <- clothing_reviews$text
# define number of words we want to consider = feature space
# use 1000 most frequent words
max_features <- 1000
tokenizer <- keras::text_tokenizer(num_words = max_features)
library(reticulate)
use_python('/opt/anaconda/anaconda3/envs/r-tensorflow/bin/python')
py_config()
tokenizer <- keras::text_tokenizer(num_words = max_features)
install.packages("kerasR")
library(kerasR)
tokenizer <- kerasR::text_tokenizer(num_words = max_features)
is_keras_available()
use_condaenv("r-tensorflow", required = TRUE)
py_run_string("import tensorflow as tf")
py_run_string("import keras")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
